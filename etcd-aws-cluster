#! /bin/bash
pkg="etcd-aws-cluster"
version="0.4"
etcd_peers_file_path="/etc/sysconfig/etcd-peers"
region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq --raw-output .region)
if [[ ! $region ]]; then
    echo "$pkg: failed to get region"
    exit 1
fi


# ETCD API https://coreos.com/etcd/docs/2.0.11/other_apis.html
add_ok=201
already_added=409
delete_ok=204

etcd_self_state=
exit_after_ejecting_bad_peers=false

#if the script has already run exit or check for bad peers
if [ -f "$etcd_peers_file_path" ]; then
    
    # IMPORTANT:
    # If the current instance is already leading a healthy cluster we must check
    # for bad peers because if the autoscaling group removes members after scaling
    # down it could result in losing quorum and require manual intervention if the
    # terminated instances are not ejected from the etcd cluster!
    
    etcd_self_state=$(curl -f -s http://127.0.0.1:4001/v2/stats/self | jq --raw-output .state)
    echo "$pkg: etcd state for this instance is $etcd_self_state"
    
    if [ "$etcd_self_state" == "StateLeader" ]; then
    	exit_after_ejecting_bad_peers=true
    	echo "$pkg: etcd-peers file $etcd_peers_file_path already created"
    	echo "$pkg: checking for terminated ec2 instances to remove from the etcd cluster"
    else
    	echo "$pkg: etcd-peers file $etcd_peers_file_path already created, exiting"
    	exit 0
    fi
fi

ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
if [[ ! $ec2_instance_id ]]; then
    echo "$pkg: failed to get instance id from instance metadata"
    exit 2
fi

ec2_instance_ip=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
if [[ ! $ec2_instance_ip ]]; then
    echo "$pkg: failed to get instance IP address"
    exit 3
fi

asg_name=$(aws autoscaling describe-auto-scaling-groups --region $region | jq --raw-output ".[] | map(select(.Instances[].InstanceId | contains(\"$ec2_instance_id\"))) | .[].AutoScalingGroupName")
if [[ ! $asg_name ]]; then
    echo "$pkg: failed to get the auto scaling group name"
    exit 4
fi

etcd_peer_urls=$(aws ec2 describe-instances --region $region --instance-ids $(aws autoscaling describe-auto-scaling-groups --region $region --auto-scaling-group-name $asg_name | jq .AutoScalingGroups[0].Instances[].InstanceId | xargs) | jq -r '.Reservations[].Instances | map("http://" + .NetworkInterfaces[].PrivateIpAddress + ":4001")[]')
if [[ ! $etcd_peer_urls ]]; then
    echo "$pkg: unable to find members of auto scaling group"
    exit 5
fi

echo "etcd_peer_urls=$etcd_peer_urls"

etcd_existing_peer_urls=
etcd_existing_peer_names=
etcd_good_member_url=

for url in $etcd_peer_urls; do
    case "$url" in
        *$ec2_instance_ip*) continue;;
    esac

    etcd_members=$(curl -f -s $url/v2/members)

    if [[ $? == 0 && $etcd_members ]]; then
        etcd_good_member_url="$url"
		echo "etcd_members=$etcd_members"
        etcd_existing_peer_urls=$(echo "$etcd_members" | jq --raw-output .[][].peerURLs[0])
		etcd_existing_peer_names=$(echo "$etcd_members" | jq --raw-output .[][].name)
	break
    fi
done

echo "etcd_good_member_url=$etcd_good_member_url"
echo "etcd_existing_peer_urls=$etcd_existing_peer_urls"
echo "etcd_existing_peer_names=$etcd_existing_peer_names"

# if I am already listed as a member of the cluster assume that this is a new cluster
if [[ $exit_after_ejecting_bad_peers || ( $etcd_existing_peer_urls && $etcd_existing_peer_names != *"$ec2_instance_id"* ) ]]; then
    
    if [[ ! $exit_after_ejecting_bad_peers ]]; then
    	echo "joining existing cluster"
    fi

    # eject bad members from cluster
    peer_regexp=$(echo "$etcd_peer_urls" | sed 's/^.*http:\/\/\([0-9.]*\):[0-9]*.*$/contains(\\"\/\/\1:\\")/' | xargs | sed 's/  */ or /g')
    if [[ ! $peer_regexp ]]; then
        echo "$pkg: failed to create peer regular expression"
        exit 6
    fi
    
    echo "peer_regexp=$peer_regexp"
    bad_peer=$(echo "$etcd_members" | jq --raw-output ".[] | map(select(.peerURLs[] | $peer_regexp | not )) | .[].id")
    echo "bad_peer=$bad_peer"

    if [[ $bad_peer ]]; then
        for bp in $bad_peer; do
            echo "removing bad peer $bp"
            status=$(curl -f -s -w %{http_code} "$etcd_good_member_url/v2/members/$bp" -XDELETE)
            if [[ $status != $delete_ok ]]; then
                echo "$pkg: ERROR: failed to remove bad peer: $bad_peer, return code $status."
                exit 7
            fi
        done
    fi
    
    if [[ $exit_after_ejecting_bad_peers ]]; then
    	echo "checked for bad peers, now exiting because the cluster is already running"
    	exit 0
    fi
    
    etcd_initial_cluster=$(curl -s -f "$etcd_good_member_url/v2/members" | jq --raw-output '.[] | map(.name + "=" + .peerURLs[0]) | .[]' | xargs | sed 's/  */,/g')$(echo ",$ec2_instance_id=http://${ec2_instance_ip}:7001")
    echo "etcd_initial_cluster=$etcd_initial_cluster"
    if [[ ! $etcd_initial_cluster ]]; then
        echo "$pkg: docker command to get etcd peers failed"
        exit 8
    fi
    
    # join an existing cluster
    echo "adding instance ID $ec2_instance_id with IP $ec2_instance_ip"
    status=$(curl -f -s -w %{http_code} -o /dev/null -XPOST "$etcd_good_member_url/v2/members" -H "Content-Type: application/json" -d "{\"peerURLs\": [\"http://$ec2_instance_ip:7001\"], \"name\": \"$ec2_instance_id\"}")
    if [[ $status != $add_ok && $status != $already_added ]]; then
        echo "$pkg: unable to add $ec2_instance_ip to the cluster: return code $status."
    	exit 9
    fi
    
    cat > "$etcd_peers_file_path" <<EOF
ETCD_INITIAL_CLUSTER_STATE=existing
ETCD_NAME=$ec2_instance_id
ETCD_INITIAL_CLUSTER="$etcd_initial_cluster"
EOF
    
else
    # create a new cluster
    echo "creating new cluster"

    etcd_initial_cluster=$(aws ec2 describe-instances --region $region --instance-ids $(aws autoscaling describe-auto-scaling-groups --region $region --auto-scaling-group-name $asg_name | jq .AutoScalingGroups[0].Instances[].InstanceId | xargs) | jq -r '.Reservations[].Instances | map(.InstanceId + "=http://" + .NetworkInterfaces[].PrivateIpAddress + ":7001")[]' | xargs | sed 's/  */,/g')
    echo "etcd_initial_cluster=$etcd_initial_cluster"
    if [[ ! $etcd_initial_cluster ]]; then
        echo "$pkg: unable to get peers from auto scaling group"
        exit 10
    fi

    cat > "$etcd_peers_file_path" <<EOF
ETCD_INITIAL_CLUSTER_STATE=new
ETCD_NAME=$ec2_instance_id
ETCD_INITIAL_CLUSTER="$etcd_initial_cluster"
EOF
fi

exit 0
